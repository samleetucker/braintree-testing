{
  "name": "wrap-promise",
  "version": "1.1.0",
  "description": "A small lib to return promises or use callbacks",
  "main": "wrap-promise.js",
  "files": [
    "wrap-promise",
    "lib/*"
  ],
  "dependencies": {},
  "devDependencies": {
    "chai": "^3.5.0",
    "eslint": "^2.7.0",
    "eslint-config-braintree": "^1.0.2",
    "mocha": "^3.2.0",
    "sinon": "^1.17.7",
    "sinon-chai": "^2.8.0"
  },
  "scripts": {
    "lint": "eslint .",
    "pretest": "npm run lint",
    "test": "mocha"
  },
  "repository": {
    "type": "git",
    "url": "git+https://github.com/braintree/wrap-promise.git"
  },
  "keywords": [],
  "author": {
    "name": "Braintree",
    "email": "code@getbraintree.com"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/braintree/wrap-promise/issues"
  },
  "homepage": "https://github.com/braintree/wrap-promise#readme",
  "gitHead": "daa66452aa0d6fe9559be68e34e880ec52e8bf1f",
  "readme": "# wrap-promise\n\nSmall module to help support APIs that return a promise or use a callback.\n\n### Example\n\n```js\n// my-method.js\nvar wrapPromise = require('wrap-promise');\n\nfunction myMethod (arg) {\n  return new Promise(function (resolve, reject) {\n    doSomethingAsync(arg, function (err, response) {\n      if (err) {\n        reject(err);\n        return;\n      }\n\n      resolve(response);\n    });\n  });\n}\n\nmodule.exports = wrapPromise(myMethod);\n\n// my-app.js\nvar myMethod = require('./my-method');\n\nmyMethod('foo').then(function (response) {\n  // do something with response\n}).catch(function (err) {\n  // handle error\n});\n\nmyMethod('foo', function (err, response) {\n  if (err) {\n    // handle error\n    return;\n  }\n\n  // do something with response\n});\n```\n\n### Wrap All Methods on the Prototype\n\n```js\nfunction MyObject() {}\n\nMyObject.prototype.myAsyncMethod = function () {\n  return new Promise (function (resolve, reject) {\n    //\n  });\n};\n\nMyObject.prototype.myOtherAsyncMethod = function () {\n  return new Promise (function (resolve, reject) {\n    //\n  });\n};\n\nmodule.exports = wrapPromise.wrapPrototype(MyObject);\n```\n\nStatic methods, sync methods on the prototype (though if you pass a function as the last argument of your sync method, you will get an error), and non-function properties on the prototype are ignored.\n\nIf there are certain methods you want ignored, you can pass an `ignoreMethods` array.\n\n```js\nmodule.exports = wrapPromise.wrapPrototype(MyObject, {\n  ignoreMethods: ['myMethodOnThePrototypeIDoNotWantTransformed']\n});\n```\n\nBy default, `wrapPrototype` ignores methods that begin with an underscore. You can override this behavior by passing: `transformPrivateMethods: true`\n\n```js\nmodule.exports = wrapPromise.wrapPrototype(MyObject, {\n  transformPrivateMethods: true\n});\n```\n",
  "readmeFilename": "README.md",
  "_id": "wrap-promise@1.1.0",
  "_shasum": "baecc463aa94db2b2e95c06aa491a48a938a6491",
  "_from": "braintree/wrap-promise#1.1.0",
  "_resolved": "git://github.com/braintree/wrap-promise.git#daa66452aa0d6fe9559be68e34e880ec52e8bf1f"
}
